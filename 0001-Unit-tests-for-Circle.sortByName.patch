From 51b09bbf7d403eb8dbee6f51dbc8ab96dce94de5 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Sat, 16 Feb 2019 19:22:49 +0100
Subject: [PATCH] Unit tests for Circle.sortByName()

---
 pom.xml                                      |  22 ++++
 src/main/java/mk/comm/Member/Member.java     |   3 +-
 src/test/java/mk/comm/Circle/CircleTest.java | 121 +++++++++++++++++++
 3 files changed, 145 insertions(+), 1 deletion(-)
 create mode 100644 src/test/java/mk/comm/Circle/CircleTest.java

diff --git a/pom.xml b/pom.xml
index 11011e1..7b60b59 100644
--- a/pom.xml
+++ b/pom.xml
@@ -74,6 +74,24 @@
             <artifactId>spring-security-test</artifactId>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.3.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-params</artifactId>
+            <version>5.3.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-engine</artifactId>
+            <version>5.3.2</version>
+            <scope>test</scope>
+        </dependency>
     </dependencies>
 
     <build>
@@ -82,6 +100,10 @@
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-maven-plugin</artifactId>
             </plugin>
+            <plugin>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>2.22.0</version>
+            </plugin>
         </plugins>
     </build>
 
diff --git a/src/main/java/mk/comm/Member/Member.java b/src/main/java/mk/comm/Member/Member.java
index f0fbf39..756911d 100644
--- a/src/main/java/mk/comm/Member/Member.java
+++ b/src/main/java/mk/comm/Member/Member.java
@@ -10,7 +10,8 @@ import javax.validation.constraints.Size;
 @Data
 @Entity
 @Table (name = "MEMBER")
-
+@NoArgsConstructor
+@AllArgsConstructor
 public class Member {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
diff --git a/src/test/java/mk/comm/Circle/CircleTest.java b/src/test/java/mk/comm/Circle/CircleTest.java
new file mode 100644
index 0000000..9b4e876
--- /dev/null
+++ b/src/test/java/mk/comm/Circle/CircleTest.java
@@ -0,0 +1,121 @@
+package mk.comm.Circle;
+
+import mk.comm.Member.Member;
+import java.util.ArrayList;
+import java.util.Arrays;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class CircleTest {
+
+    @Test
+    public void sortingOfEmptyCircleShouldReturnEmptyCircle() {
+        Circle unsorted = new Circle();
+        Circle result = Circle.SortByName(unsorted);
+        assertTrue(result.getMembers().isEmpty());
+    }
+
+    @Test
+    public void sortingOfOneMemberShouldReturnOneElement() {
+        Circle unsorted = createTestCircle(new Member[] {
+                createMember(1L, "Andrzej", "Wspolnotowy", 'M', 0L)
+        });
+
+        Circle expected = createTestCircle(new Member[] {
+                createMember(1L, "Andrzej", "Wspolnotowy", 'M', 0L)
+        });
+
+        Circle result = Circle.SortByName(unsorted);
+        assertEquals(expected.getMembers(), result.getMembers());
+    }
+
+    @Test
+    public void sortingOfNotMarriedMan() {
+        Circle unsorted = createTestCircle(new Member[] {
+                createMember(1L, "Andrzej", "Andrzejewski", 'M', 0L),
+                createMember(4L, "Cezary",  "Cosik", 'M', 0L),
+                createMember(5L, "Daniel",  "Dabrowski", 'M', 0L),
+                createMember(6L, "Bogumil", "Baranowski", 'M', 0L),
+                createMember(3L, "Adam",    "Andrzejkiewicz", 'M', 0L),
+                createMember(2L, "Zbyszek", "Andrzejczak", 'M', 0L),
+        });
+
+        Circle expected = createTestCircle(new Member[] {
+                createMember(5L, "Daniel",  "Dabrowski", 'M', 0L),
+                createMember(4L, "Cezary",  "Cosik", 'M', 0L),
+                createMember(6L, "Bogumil", "Baranowski", 'M', 0L),
+                createMember(3L, "Adam",    "Andrzejkiewicz", 'M', 0L),
+                createMember(1L, "Andrzej", "Andrzejewski", 'M', 0L),
+                createMember(2L, "Zbyszek", "Andrzejczak", 'M', 0L),
+        });
+
+        Circle result = Circle.SortByName(unsorted);
+        assertEquals(expected.getMembers(), result.getMembers());
+    }
+
+    @Test
+    public void sortingOfNotMarriedManAndWoman() {
+        Circle unsorted = createTestCircle(new Member[] {
+                createMember(1L, "Andrzej", "Andrzejewski", 'M', 0L),
+                createMember(4L, "Joanna",  "Baranowska", 'K', 0L),
+                createMember(5L, "Danuta",  "Dabrowska", 'K', 0L),
+                createMember(6L, "Leszek",  "Baranowski", 'M', 0L),
+                createMember(3L, "Adam",    "Andrzejkiewicz", 'M', 0L),
+                createMember(2L, "Zbyszek", "Andrzejczak", 'M', 0L),
+        });
+
+        Circle expected = createTestCircle(new Member[] {
+                createMember(5L, "Danuta",  "Dabrowska", 'K', 0L),
+                createMember(6L, "Leszek",  "Baranowski", 'M', 0L),
+                createMember(4L, "Joanna",  "Baranowska", 'K', 0L),
+                createMember(3L, "Adam",    "Andrzejkiewicz", 'M', 0L),
+                createMember(1L, "Andrzej", "Andrzejewski", 'M', 0L),
+                createMember(2L, "Zbyszek", "Andrzejczak", 'M', 0L),
+        });
+
+        Circle result = Circle.SortByName(unsorted);
+        assertEquals(expected.getMembers(), result.getMembers());
+    }
+
+    @Test
+    public void sortingOfMarriedManAndWoman() {
+        Circle unsorted = createTestCircle(new Member[] {
+                createMember(1L, "Andrzej", "Andrzejewski", 'M', 0L),
+                createMember(4L, "Joanna",  "Baranowska", 'K', 0L),
+                createMember(5L, "Danuta",  "Dabrowska", 'K', 3L),
+                createMember(6L, "Leszek",  "Baranowski", 'M', 0L),
+                createMember(3L, "Adam",    "Andrzejkiewicz", 'M', 5L),
+                createMember(2L, "Zbyszek", "Andrzejczak", 'M', 0L),
+        });
+
+        Circle expected = createTestCircle(new Member[] {
+                createMember(6L, "Leszek",  "Baranowski", 'M', 0L),
+                createMember(4L, "Joanna",  "Baranowska", 'K', 0L),
+                createMember(5L, "Danuta",  "Dabrowska", 'K', 3L),
+                createMember(3L, "Adam",    "Andrzejkiewicz", 'M', 5L),
+                createMember(1L, "Andrzej", "Andrzejewski", 'M', 0L),
+                createMember(2L, "Zbyszek", "Andrzejczak", 'M', 0L),
+        });
+
+        Circle result = Circle.SortByName(unsorted);
+        assertEquals(expected.getMembers(), result.getMembers());
+    }
+
+    private Circle createTestCircle(Member[] members) {
+        Circle circle = new Circle();
+        circle.setMembers(new ArrayList<>(Arrays.asList(members)));
+        return circle;
+    }
+
+    private Member createMember(Long id, String name, String surname, Character sex, Long married) {
+        String email = "";
+        String phone = "";
+        Long communityId = 0L;
+        String attendance = "";
+        String token = "";
+        boolean doSomeAction = false;
+        return new Member(id, email, name, surname, phone, sex, married, communityId, attendance, token, doSomeAction);
+    }
+
+}
\ No newline at end of file
-- 
2.20.1

